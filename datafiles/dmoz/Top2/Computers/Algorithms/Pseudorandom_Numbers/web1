 - Home - Contact - Impressum About us Generators Links Literature Software Tests WWW Virtual Library A short tour of the information we offer: Generators Links Literature Software Tests Research supported by News Viaja Fcil MCQMC 2012 Fq10 -Ghent Conference MCQMC 2010 here . Advertisements Home Contact | Impressum About us | Generators Links | Literature Software | Tests 
 Home Cultural Selection Theory Evolutionary biology Random number generators Software optimization resources Web software Contact address Pseudo random number generators uniform and non-uniform distributions This page contains software libraries for some very good random number generators. The non-uniform random number generators make random variates with several different distributions. This code is available in C++ language. Code examples are included, showing how to use these software libraries. All code is provided with open source under the Gnu general public license. Download packages: Uniform random number generators in C++ Description System requirements : Any C++ compiler, any operating system. Further description and instructions File name : randomc.zip, size: 293085, last modified: 2013-Oct-06. Download C++ random number generators Uniform random number generators as binary libraries Description System requirements Further description and instructions File name : asmlib.zip, size: 711586, last modified: 2013-Dec-18. Download random number generator binary libraries Non-uniform random number generators in C++ Description Further description and instructions . pdf format . theory . pdf format . File name : stocc.zip, size: 607764, last modified: 2013-Oct-06. Download non-uniform random number generators List of random numbers Description : A list of 10000 random numbers generated with a combined generator. File name : 10000ran.zip, size: 49098, last modified: 2005-May-24. Download 10000 random numbers R package for noncentral hypergeometric distributions Description www.r-project.org Package name : BiasedUrn, last modified: 2007-Jun-16. BiasedUrn discussion board . Follow my research on the noncentral hypergeometric distributions Please don't mail me with your programming problems. Your mail will not be answered. Links to related sites The R Project for Statistical Computing ftp://odin.mda.uth.tmc.edu/pub/source ftp://odin.mda.uth.tmc.edu/pub/msdos RngPack: Random number generators for Java: http://www.honeylocust.com/RngPack/ Matsumoto's Mersenne Twister RNG: Regress: Statistics package for Macintosh: 1059576 I ndex N ext 
 Segobit Software Online software File Properties Changer Random Number Generator Pro Full-size preview Processor: 486/Pentium Windows 9x/Me/NT/2000/XP/ 16Mb 268Kb Download! Download rng.EXE rng.zip registration information . this secure on-line ordering page . 
 - Home - Contact - Impressum About us Generators Links - Specialists Literature Software Tests section on Mathematics pLab Peter Hellekalek Information will be provided for the following subjects: Stochastic Simulation Specialists In RNGs and (Quasi-) Monte Carlo Research supported by Advertisements Home Contact | Impressum About us | Generators Links | Literature Software | Tests 
 random here zufall.f zufall.shar 2drwtest.f nblocktest.f acorrtiw.f ranlib.f.tar.gz ranlib.c.tar.gz dcdflib.f.tar.gz dcdflib.c.tar.gz sprng.tar.gz random.f90 ziggurat.f90 amrandom.pas 
 - Home - Contact - Impressum About us Generators Links Literature - Introductions Foundations Simulation Cryptography Software Tests INTRODUCTIONS SURVEYS www.mcqmc.org Fang, K.-T., Hickernell, F.J., and Niederreiter, H. (editor): Niederreiter, H. and Spanier, J. (editor): Knuth, D.E.: Niederreiter, H.: Hrmann, W., Leydold, J. and Derflinger, G.: nonuniform random numbers. L'Ecuyer, P.: Random number generation L'Ecuyer, P.: Hellekalek, P.: In Hellekalek, P. and Larcher, G., editor(s), Niederreiter, H.: Hellekalek, P.: Proceedings of the 1995 Winter Simulation Conference Wegenkittl, S.: . Wegenkittl, S.: Marsaglia, G.: A current view of random number generators Computer Science and Statistics: The Interface Anderson, S.L.: Eddy, W.F.: Random number generators for parallel processors L'Ecuyer, P.: Random numbers for simulation. L'Ecuyer, P.: Random number generation. Ripley, B.D.: Thoughts on pseudorandom number generators MATHEMATICAL FOUNDATIONS AND PHILOSOPHY probability Chaitin, G.J.: Randomness and mathematical proof Compagner, A.: Definitions of randomness Kac, M.: What is random? Knuth, D.E.: Schnorr, C.P.: Zuflligkeit und Wahrscheinlichkeit Kuipers, L. and Niederreiter, H.: Hellekalek, P.: Lidl, R. and Niederreiter, H.: Fishman, G.S.: The same holds for the monograph on nonuniform random variate generation, Hrmann, W., Leydold, J. and Derflinger, G.: SIMULATION LINEAR GENERATORS L'Ecuyer, P.: Random number generation Dieter, U.: How to calculate shortest vectors in a lattice Matsumoto, M. and Kurita, Y.: Twisted GFSR generators Matsumoto, M. and Kurita, Y.: Twisted GFSR generators II Matsumoto, M. and Nishimura, T.: on-line SIMULATION Hellekalek, P.: Niederreiter, H. and Shparlinski, I.~E.: Niederreiter, H. and Shparlinski, I.~E.: Niederreiter, H. and Winterhof, A.: Weingartner, A.: Niederreiter, H.: Many of these results remain state of the art. CRYPTOGRAPHICAL GENERATORS Lagarias, J.C.: Pseudorandom Numbers Blum, M. and Micali, S.: Goldreich, O.: Luby, M.: Pseudorandomness and Cryptographic Applications Krawczyk, H.: How to predict congruential generators Maurer, U.: Wegenkittl, S.: Schneier, B.: back to the top Research supported by Advertisements Home Contact | Impressum About us | Generators Links | Literature Software | Tests 
 Free Web Hosting Provider Web Hosting E-commerce High Speed Internet Free Web Page Search the Web Welcome! Close Would you like to make this site your homepage? It's fast and easy... Yes, Please make this my home page! No Thanks Don't show this to me again. Close GRAND PRIZE AT NATIONAL CONTEST "E-IDEA" FOR SOFTWARE IDEAS/PRODUCTS AT BINARY 2002, BUCHAREST-ROMANIA HENKOS PSEUDO-RANDOM NUMBER GENERATOR The generation of random numbers is critical to cryptographic systems. Symmetric ciphers such as DES, RC2, and RC5 all require a randomly selected encryption key. Public-key algorithms - like RSA, Diffie-Hellman, and DSA - begin with randomly generated values when generating prime numbers. At a higher level, SSL and other cryptographic protocols use random challenges in the authentication process to foil replay attacks. But truly random numbers are difficult to come by in software-only solutions, where electrical noise and sources of hardware randomness are not available (or at least not convenient). This poses a challenge for software developers implementing cryptography. A pseudo-random number generator (PRNG) is a deterministic algorithm which, given a truly random binary sequence of length k, outputs a binary sequence of length l k which appears to be random. The input to the generator is called the seed, while the output is called a pseudorandom bit sequence. A PRNG must have a high degree of unpredictability. Even if nearly every bit of output is known, those that are unknown should remain hard to predict. The other component in producing good random numbers is providing a random seed. A good PRNG will produce a sequence that is sufficiently random for cryptographic operations, with one catch: it needs to be properly initialized, or . Using a bad seed is a common flaw in poorly implemented cryptographic systems. There are two aspects to a random seed: quantity and quality. They are related. The quality of a random seed refers to the entropy of its bits. Cryptographers use the word entropy a lot, so it is worth knowing. In a system that produces the same output each time, each bit is fixed, so there is no uncertainty, or zero entropy per bit. If every possible sequence of outputs is equally likely (i.e. truly random) then there is total uncertainty, or one bit of entropy per output bit. There are precise mathematical formulas for entropy, but the short summary is the more entropy per bit, the better. Since the quality may vary, it is a good idea to account for this with quantity. Sufficient quantity makes it impractical for an attacker to exhaustively try all likely seed values. The HENKOS generator is a new type of generator that implements an own algorithm that essentially modifies the mode of construction and utilization of pseudo-random number generators. This generator brings two new directions referring to the quantity and quality of a seed used as input: * the seeds size is not selected from a fixed interval, there is only an inferior limitation of 192 bits meant to prevent its location using a brute-force attack, which can be whatever big, the superior limit being established according with the application where the generator will be used. * it can be generated a sequence of pseudo-random numbers from any seed no matter its entropy, even from one whit a zero entropy which doesnt contain any information. HENKOS generator has two distinctive parts: 1. a training module - who prepares the seed in order to become a good seed. 2. the generation module - that produce the output pseudo-random sequence. The verification of generated sequence for establish if it has or nor random features is made by statistic tests. The HENKOS generator is successfully passing the most important packs of statistic tests: FIPS 140-1, FIPS 140-2 (security requirements for cryptographic modules, Commerce Department USA), ENT tests(the entropy count, chi square test, the Monte Carlo test), DIEHARD (the most pack of tests which many generators are not passing it; author dr. Marsaglia, Florida University), NIST Statistical Test Suite (tests developed at The National Institute For Standard and Technologies from USA for the pseudo-random number generators which are going to be used in the cryptographic applications). In the development of HENKOS generator was used an algorithm of own conceive and for its implementation in the software variant it has been used the C language this one assuring a good portability of the source cod as well as for DOS/Windows and for the Linux operating system. For obtain of the two versions it has been used the Borland C compiler for DOS/Windows and the gcc compiler for Linux. It has been done tests on samples of numbers produced by the generator of order of tens and hundred megabytes and the results up till now indicates the fact that it can be used in the cryptographic applications. Advantages * the HENKOS generator allowed the use of a seed with a very big length, theoretical there is not a superior limitation which make it impossible to be found in order to compare with the other generators which has a limitation of seeds size. * HENKOS may generate a pseudo-random sequence from any seed inclusive from a seed with zero entropy, thing impossible to be done by other generator. Thats why this PRNG cannot generate non-random sequences if wasnt properly seeded. * From the test result a superior speed of generating of the numbers of 276 Mbps, which shows that is faster than the existing generators. This results because the algorithm simplicity. * The security is not sacrificed for the speed, the statistic tests confirming that the generator can be used in cryptographic applications. * HENKOS generator might be an efficient alternative in the security applications (keys generating for the encryption algorithms) having in vision the news represented, its implementation needs very low costs. Target Telecommunications Category Solutions for data security Necessary resources HENKOS pseudo-random number generator doesnt need especially resources; it can be actually to work in minimal system. There is also the version for DOS/Windows as well the version for Linux. The generating speed of a sequence depends directly on of the system performances, as refer point the generator was tested on the system PII 300MHz, 32 MB RAM, DOS/Windows 98 / Linux (276.62 Mbps, for a seed of 640 bits). Contact: Marius Oliver Gheorghita (redwire05@yahoo.com) COUNTER HENKOSPSEUDO-RANDOM NUMBER GENERATOR Statistical tests for randomness 1. FIPS 140-1 and FIPS 140-2 (security requirements for cryptographic modules) 2. ENT pseudorandom sequence test program See the results of the tests and a sample of 10,000 pseudorandom bytes 
 Programs for the PC Prices Check Our Prices. Simple A simple random number generator. Generate random numbers from a single range [low,high]. Medusa Minotaur multiple Vortex Auditor non-numeric data and numeric ValuePack Medusa, Minotaur, Simple and Vortex for one low price . LottoBots ? For comprehensive RandomWare.com Auditor date formats. Enter non-numeric 25 ( Unlimited ). Medusa - Simple - Generate a single set of random numbers from a range [ Minotaur - multiple sets of random numbers from a numeric range. Generate multiple sample sets of random numbers from a range [ Vortex - LottoBots World's Value Pack - Purchase all four software utilities for one low price. BitBots.com PublishPoint.com For Custom Software Application Development visit: KleinMobius.com 
 Free Random Number Generator Simplest thing in the world, a little 20KB program Should run on any Windows, 95 to present Created using Microsoft Visual Basic 6.0 Will download as ( ) Random Number Generator copyright 2003-2013 by Scott Donato Saccenti ( http://www.saccenti.com/index.htm ). Here is what the program looks like: The Visual Basic source code is: Option Explicit ElseIf txtInput.Text 1 Then i = txtInput.Text txtOutput.Text = Fix(i * Rnd) + 1 errhandler: 
 ent NAME ent SYNOPSIS ent [ -b -c -f -t -u ] [ infile DESCRIPTION ent infile (or standard input if no infile Entropy Chi-square Test rand() Arithmetic Mean -b -b Monte Carlo Value for Pi Serial Correlation Coefficient OPTIONS -b -c -b -f -t Terse Mode Output Format -u Print how-to-call information. FILES infile is specified, ent TERSE MODE OUTPUT FORMAT -t -c file_length , entropy , chi_square , mean , Pi_value , correlation -b File-bits file_length -c v , count , fraction -b v =0 and v v fraction v count file_length BUGS -b (Zipped archive) random.zip Zipped ent.exe Makefile SEE ALSO [Hamming] Coding and Information Theory [Knuth] [LempelZiv] IEEE Transactions on Information Theory 23 , 3, pp.337-343. [Park Miller] Communications of the ACM , October 1988, p.1192. by John Walker Fourmilab Home Page 
 RngPack 1.1a Nov 6, 2003 -- RngPack 1.1 released BSD License . See the Changelog , java class documentation , or download source code in tar.gz zip What is RngPack? BSD License. What is RngPack good for? Research applications: the RANLUX , RANMAR RANECU portable FORTRAN Math.random() What isn't RngPack good for? Math.random() Comparison of generators Name Period Time (no JIT / JIT) Special properties Ranlux 10 171 14.7 s RANLUX RANLUX Ranmar 10 43 4.2 s RANMAR Ranecu 10 18 5.8 s RANECU RanMT 2 19937 -1 7.1 s RandomJava ? 8.0 s RandomJava wraps up the Math.random() Not reccomended for general use. Download gzip-tar file ZIP BSD Licence 
 UNU.RAN Manual Download Documentation Other Software ARVAG GNU Public License reliable , portable and robust consisent and easy to use black-box universal algorithms object-oriented interface Distributions and generators Distribution objects Generator objects Parameter objects Uniform Random Number Generators PRNG ROOT R SSJ EcoLab Josef Leydold ARVAG Serbo-Croatian Web Geeks Resources UNU.RAN Manual Download Documentation Other Software ARVAG Josef Leydold 
 Quasi-Random Sequences , Previous: Numerical Integration , Up: Top [ Index ] 18 Random Number Generation These functions are declared in the header file gsl_rng.h General comments on random numbers : The Random Number Generator Interface : Random number generator initialization : Sampling from a random number generator : Auxiliary random number generator functions : Random number environment variables : Copying random number generator state : Reading and writing random number generator state : Random number generator algorithms : Unix random number generators : Other random number generators : Random Number Generator Performance : Random Number Generator Examples : Random Number References and Further Reading : Random Number Acknowledgements : Quasi-Random Sequences , Previous: Numerical Integration , Up: Top [ Index ] 
 NIST, Computer Security Division, Computer Security Resource Center about mission contact staff site map csrc home groups Cryptographic Technology Systems Emerging Technologies Security Research Security Management Assurance publications Draft Publications FIPS Publications Special Publications NIST Interagency Reports ITL Security Bulletins Archived FIPS Publications Archived Special Publications List by Topic Clusters List by Family by Legal Requirement drivers Federal Register Notices news & events News News Archive Events archive Random Number Generation Download Documentation and Software Activities Publications and Presentations Guide to Statistical Tests References RNG Standards Development Bodies RNG and Testing Technical Working Group Batteries of Statistical Tests for RNG Contacts CSRC Home Groups ST Cryptographic Toolkit random number generation The three primary goals were: (a) to develop a battery of statistical tests to detect non-randomness in binary sequences constructed using random number generators and pseudo-random number generators utilized in cryptographic applications, (b) to produce documentation and a software implementation of these tests, and (c) to provide guidance in the use and application of these tests. Description Since 1997, the Random Number Generation Technical Working Group (RNG-TWG) has been working on developing a battery of statistical tests suitable in the evaluation of random number generators and pseudo-random number generators used in cryptographic applications. Currently, we are finalizing the documentation and software in preparation for public release. An excerpt from the document is provided below. Summary The need for random and pseudorandom numbers arises in many cryptographic applications. For example, common cryptosystems employ keys that must be generated in a random fashion. Many cryptographic protocols also require random or pseudorandom inputs at various points, e.g., for auxiliary quantities used in generating digital signatures, or for generating challenges in authentication protocols. NIST Special Publication 800-22 A Statistical Test Suite for Random and Pseudorandom Number Generators for Cryptographic Applications , discusses some aspects of selecting and testing random and pseudorandom number generators. Generators suitable for use in cryptographic applications may need to meet stronger requirements than for use in other applications. In particular, their outputs may need to be unpredictable in the absence of knowledge of the inputs. Some criteria for characterizing and selecting appropriate generators are discussed in this document. The subject of statistical testing and its relation to cryptanalysis is also discussed, and some recommended statistical tests are provided. These tests may be useful as a first step in determining whether or not a generator is suitable for a particular cryptographic application. However, no set of statistical tests can absolutely certify a generator as appropriate for usage in a particular application, i.e., statistical testing cannot serve as a substitute for cryptanalysis. The design and cryptanalysis of generators is outside the scope of this paper. CryptoToolkit Webmaster Disclaimer Notice Privacy Policy NIST U.S. Department of Commerce December 26, 2013 
 Home CV CV (hebrew) FPGA Editor Free software Lectures Perlilog Eobj frandom cdepend hitec (LaTeX) easyspec peakdet FIFO tricks CDCE906 Optical simulator HTML highlighting Hobbies Tech blog frandom /dev/frandom ) or none ( /dev/erandom Download the kernel module tarball. Isn't /dev/urandom enough? /dev/frandom is as necessary as /dev/zero What's the difference between /dev/frandom and /dev/erandom ? /dev/frandom /dev/frandom /dev/erandom /dev/erandom How fast is it? /dev/ u random Will it work on my kernel? Is it stable? How is random data generated? Now to frandom: Every time /dev/frandom /dev/ u random . The pseudo-random stream is what you read from /dev/frandom Does frandom generate good random numbers? /dev/frandom "Diehard" battery of tests Can frandom be used to create one-time pads (cryptology)? /dev/frandom as a one-time pad is equivalent /dev/ u random Last modified on Thu May 17 17:30:00 2012. E-mail: 
 We do the math so you don't have to! Random Number Generation John Von Neumann (1951) Forth Dimensions review article on random numbers tar.Z tar.gz formats). Contains R250 quasi Forth . Reference list generating Gaussian/Normal Random Numbers Monte Carlo method Reference list . Bestiary of Random Distributions . Pseudo-Random number generation using R250 (Kirkpatrick and Stoll, 1981) Ada implementation. C ). C++ ). ANS Forth implementation. FORTRAN implementation Java implementation. Note On primitive trinomials (mod 2) Information and Control Information and Control Warning RANLUX . . Quasi-Random number generation Ada C shell archive tar archive ). shell archive tar archive ANS Forth much Whats all the fuss about ? Why can't I just use the PRNG that came with my compiler ? C++ Classes Stochastic Methods A Hardware Random number device for PCs Another Hardware Random number device skip@taygeta.com Taygeta's Home page 
 Home | Contact Us | Log In | Shopping Cart - 0 item(s) - $0.00 | Downloads | International Orders ComScire Random Generator Product Selection Guide True Random Number Generators FAQs Technology & Patents Support About ComScire Certification Site Map World's Best True Random Number Generators Don't leave randomness to chance! Compare Now & Choose ComScire. Get a Free Trial Version of our Software-Enabled True Random Number Generator True Random Number Generators (TRNGs) are at the heart of all modern computer applications requiring the highest levels of data security and provides complete confidence in the fairness of random selections or drawings. Quantum random number generators are theoretically unpredictable and are considered to be the most secure type possible. ComScires new Pure Quantum TRNGs are the world's most advanced and most reliable commercial TRNGs available. Relying on experience and technology proven for over 18 years, our worldwide customers include national and state lotteries, online gaming companies, gaming systems manufacturers, and military and civilian security agencies. Copyright 1995 - 2014 The Quantum World Corporation. All rights reserved. ComScire QNG models J20KP, J1000KU, R2000KU, R32MU, PQ4000KU and the PQ32MU are covered by one or more of the following Patents: U.S. Patent No(s).: 6,324,558; 6,763,364; 6,862,605; 7,096,242; 7,752,247. Other patents pending. True Random Number Generators FAQs Technology & Patents Support Site Map About ComScire Certification Home Contact Us Log In View Cart Downloads International Orders Site Search ComScire Random Generator Product Selection Guide Why Choose ComScire? 
 pseudorandom numbers , and HotBits genuine HotBits HotBits generation hardware certain randomX for Java. A program developed with randomX Secure Server HotBits Request Legacy Insecure Server HotBits Request How HotBits Works HotBits Hardware Description HotBits Software Driver Statistical Tests of HotBits Data The randomX package for Java John Walker 
 Home Games Lottery Quick Pick Keno Quick Pick Coin Flipper Dice Roller Playing Card Shuffler Birdie Fund Generator Numbers Integers Sequences Integer Sets Gaussian Numbers Decimal Fractions Raw Bytes Lists More List Randomizer Strings Passwords Clock Times Calendar Dates Geographic Coordinates Bitmaps Pregenerated Files Jazz Scales Pure White Audio Noise Samuel Beckett Drawings How to Pick a Winner (FREE) Third-Party Draw Service Step by Step Guide Step by Step Video Price Calculator Public Records Terms and Conditions Drawing FAQ Web Tools Widgets for Your Pages API for Automated Clients Old API for Automated Clients Old Guidelines for Automated Clients Banned Hosts Statistics Real-Time Statistics Graph Browser Testing Random Numbers Total Bit Tally Your Quota Testimonials Lotteries and Drawings Games and Gambling Random Sampling Simulation and Modelling Security The Arts Miscellaneous Learn More About Contact Terms and Conditions FAQ Introduction to Randomness History of RANDOM.ORG Acknowledgements Media and Scientific Citations Newsletter Quotations about Randomness What's New! Login True Random Number Service Warning: Your browser does not support JavaScript RANDOM.ORG may not work as expected Do you own an iOS or Android device? Check out our new app! What's this fuss about true randomness? pseudo-random RANDOM.ORG offers true Dr Mads Haahr of the at in Ireland. Today, RANDOM.ORG is operated by Randomness and Integrity Services Ltd . As of today, RANDOM.ORG has generated for the Internet community. FREE services Games and Gambling Lottery Quick Pick is perhaps the Internet's most popular with 188 lotteries Keno Quick Pick for the popular game played at many casinos Coin Flipper will give you heads or tails in many currencies Dice Roller does exactly what it says on the tin Playing Card Shuffler will draw cards from multiple shuffled decks Birdie Fund Generator will create birdie holes for golf courses PAID service Random Drawings Q3.1 in the FAQ explains how to pick a winner for your giveaway for FREE Third-Party Draw Service is the premier solution to holding random drawings online Step by Step Guide explains how to hold a drawing with the Third-Party Draw Service Step by Step Video shows how to hold a drawing with the Third-Party Draw Service Price Calculator tells exactly how much your drawing will cost Drawing FAQ answers common questions about holding drawings Public Records shows all completed drawings going back five years Drawing Result Widget can be used to publish your winners on your web page Terms and Conditions are the rules that govern the use of RANDOM.ORG FREE services Numbers Integer Generator makes random numbers in configurable intervals Sequence Generator will randomize an integer sequence of your choice Integer Set Generator makes sets of non-repeating integers Gaussian Generator makes random numbers to fit a normal distribution Decimal Fraction Generator makes numbers in the [0,1] range with configurable decimal places Raw Random Bytes are useful for many cryptographic purposes FREE services Lists and Strings and Maps, Oh My! List Randomizer will randomize a list of anything you have (names, phone numbers, etc.) String Generator makes random alphanumeric strings Password Generator makes secure passwords for your Wi-Fi or that extra Gmail account iGoogle Password Generator is a handy tool for your iGoogle desktop Clock Time Generator will pick random times of the day Calendar Date Generator will pick random days across nearly three and a half millennia Geographic Coordinate Generator will pick a random spot on our planet's surface Bitmaps in black and white Pregenerated Files contain large amounts of downloadable random bits Pure White Audio Noise for composition or just to test your audio equipment Jazz Scales to practice improvisation for students of jazz guitar Samuel Beckett 's randomly generated short prose DNA Protein Sequence Randomizer FREE services Web Tools and Widgets for Your Pages Integer Widget Wizard will put a mini-RANDOM.ORG on your web page or blog Draw Widget Wizard will put the result of a paid drawing on your web page or blog HTTP API to get true random numbers into your own code Guidelines describe how to avoid getting in trouble Banned Hosts lists who didn't behave and have been blocked Learn about Randomness Introduction to Randomness explains what true random numbers are and why they're interesting History explains how RANDOM.ORG started and where it is today Many Testimonials from folks who have found very creative uses for random numbers Acknowledgements to all the generous folks who have helped out Quotations about randomness in science, the arts and in life generally Media Coverage and Scientific Citations lists popular print and scientific mention of the service News about the latest additions to the site Statistics Real-Time Statistics show how the generator is performing right now Statistical Analysis explains how you test random numbers for randomness Bit Tally shows how much randomness has been generated since 1998 (hint: lots!) Your Quota tells how many random bits you have left for today Contact and Help FAQ contains answers to frequently asked questions Newsletter appears quite irregularly, but do sign up Contact Details in case you want to get in touch 1998-2014 RANDOM.ORG Valid XHTML 1.0 Transitional Valid CSS Terms and Conditions Follow @RandomOrg 
 Robert Davies http://statsresearch.co.nz http://www.robertnz.net 14 October, 2000 robertnz.net return to SRA papers page This is a paper presented to the in July, 2000 and the in September, 2000. The paper is about the testing and the applications of . not available. Sorry. A hardware random number generator pseudo-random 1997 web page pass the test but this does not good . Or your generator might fail not bad . electrical noise radioactive God really doesnt play dice http://www.fourmilab.ch/hotbits Protego Experimental design The major application is for encryption A generates a series of bits. I will say that they are if they have expectation 0.5 and are independent. I use the term uniform random n such bits interpreted as a binary number will be uniform n uniform random . For most purposes, we would like the bits (statisticians call them since a sequence of n uniform distribution n -1. Some people would describe the bits as being or completely random imperfectly or random. A is different from a pseudo-random number generator Diehard tests to be generally George Marsaglia Diehard tests Random number CD-ROM http://stat.fsu.edu/~geo/diehard.html George Marsaglia is a well-known random number guru. His paper X 1 , X 2 , X 3 X 2 , X 3 , X 4 X 3 , X 4 , X 5 1 , X 2, Marsaglia has developed a series of statistical tests known as the Tundra/Newbridge A http://www.protego.se A of their generator. B . If we are limited to point C E or F . Testing at D , E and F XOR corrector independent e e 2 . Von Neumann corrector stationary unbiased . Raw 10 11 00 10 10 01 00 01 10 10 01 01 11 00 10 00 10 10 01 01 11 XOR 1 0 0 1 1 1 0 1 1 1 1 1 0 0 1 0 1 1 1 1 0 Von Neumann 1 1 1 0 0 1 1 0 0 1 1 1 0 0 Bias Drift Short term auto-correlation Other short term dependencies Discrete frequencies 1/ f noise Other non-whiteness Bad spots Back door Here is a list of deviations from uniform randomness biased drift correlated short-term dependencies throw Semiconductor noise tends to have an excess of low frequency f Bad spots Back door Defect Test Relevance bias mean both drift raw both both raw 1/ f autocorrelation? raw non-whiteness raw B in the flow C monkey test For frequency components, obviously use the spectrum or periodogram. I think I need to do more investigation on the detection of 1/ f f 0.75 . For other non-whiteness, look at the spectrum, of course. Diehard Defect Test Relevance both ??? both both corrected both Maurer corrected corrected Now looking at some more of the possible defects. A run average run length variance of the run length FIPS 140-1 I have included the Maurer beeping screaming . = two bytes 13,10 ASCII copy from PC to UNIX Byte pair 13, 10 = little-endian big-endian But very important important less important 10 (significance probability) application accuracy speed encryption medium medium true lottery high true ? compromise ? high E and F in the flow return to return to SRA papers page 
