 1 Overview There may also be more than one CPU. FIXME . 2 Weird macros and other mysteries 2.1 static methods hack C++ methods have an invisible parameter called the this Declaration of a class, from iodev/pic.h: And iodev/pic.cc: static bx_pic this- 2.2 In a UP configuration, the CPU object is declared as bx_cpu bx_cpu_array[] ). For memory that would be bx_mem bx_mem_array[] , respectively. Each CPU object contains a pointer to its associated memory object. Access of a CPU object often goes through the BX_CPU(x) bx_cpu bx_cpu_array[n] BX_MEM(x) . If static methods are used then BX_CPU_THIS_PTR BX_CPU(0)- . Ugly, isn't it? 2.3 2.4 BX_TICK1_IF_SINGLE_PROCESSOR BX_TICK1 3 CHECK_MAX_INSTRUCTIONS(count) 3.1 BX_SIM_ID 3.2 3.3 3.4 Cosimulation support very 4 Memory - An Introduction 5 The Basic CPU 5.1 Yada yada, you get the picture... 5.2 Some example instructions 5.3 Decoding instructions is *HARD* 5.4 BxInstruction_t 5.5 The Main Loop - First cut 5.6 5.7 The Main Loop - SMP 5.8 Should be called something else. 5.9 FetchDecode 5.10 Execute pointers 5.11 The Anatomy of Memory Accesses segment : offset - 32-bit linear - 32-bit physical segments, segment caches, base + limit, type 5.12 5.13 5.14 Things I lied about 5.15 Flag handling 5.16 How are exceptions implemented? longjmp(), setjmp() 5.17 What if we trip on an assertion? 6 Specific tricks 6.1 4GB in real mode What is the trick and how does bochs make sure that it works 6.2 reset + cmos 6.3 Typical reset thru keyboard controller 6.4 Triple-fault reset 6.5 Fast reset gate 6.6 6.7 NMI gate 6.8 V86 6.9 V86 with virtual interrupt flag 6.10 APIC: IRQ rerouting to NMI 6.11 SMP: IPI (Inter-Processor Interrupt) 6.12 SMP: cache bounces 6.13 SMP: locked read-modify-writes 6.14 SMP: spinlocks 6.15 SMP: TSC potentially out of synch 6.16 SMP: BIOS and necessary tables 6.17 SMM - System Management Mode Not implemented yet. Required for ACPI, I think. 6.18 Huge amounts of memory 6.19 PnP 6.20 PCI - configuration 6.21 PCI controller 7 7.1 7.2 8 Optimization Ideas 8.1 Traces 8.2 Squish out flags handling BX_NEED_FLAGS, BX_SETS_FLAGS 8.3 How to be lazy with addresses 8.4 special versions of access_linear() 8.5 8.6 combine segment limits with TLB pages 8.7 9 Communication Between Devices 9.1 Ticks and hardware emulation Examples of worker functions: xxxxx. 9.2 Interrupts 9.3 DMA HOLDA 9.4 IRQ pins ISA IRQ2/9, IRQ3, IRQ4, IRQ5, IRQ6, IRQ7, IRQ... PCI INTA, INTB, INTC, INTD - routing i PCI controller + on motherboard. 9.5 Interrupt routing Level/edge triggered. PIC APIC PCI controller 9.6 NMI 10 Communication between VGA and GUI 10.1 idle (HLT) and GUI 10.2 GUI and configuration 10.2.1 Floppy disk 10.2.2 CD ROM 11 Various Hardware 11.1 CPU 11.2 CPU - SMP 11.3 APIC 11.4 PIT 11.5 PIC - master/slave 11.6 Slowdown 11.7 Realtime PIC 11.8 RTC + CMOS 11.9 11.10 11.11 11.12 AGP 11.13 11.14 Floppy Controller 11.15 IDE 11.16 Harddisk 11.17 CDROM 11.18 Speaker 11.19 Sound Blaster 11.20 NE2K NIC 11.21 Mouse 11.22 Keyboard 11.23 Parallel port 11.24 Serial Port 11.25 USB 11.26 SCSI 11.27 IRQ in general 11.28 Ordinary BIOS 11.29 VGA BIOS 11.30 12 How to register a new device 13 How to make snapshots 14 How to suspend/resume 15 How to make configurations easier 16 Dreams for the future: 17 Error messages 18 Tools/links FIXME: true? 
